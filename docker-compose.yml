services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        - DATABASE_URL=${BUILD_DATABASE_URL}
        - REFLEX_API_URL=${REFLEX_API_URL}
    image: kjh-nanophotonics-portfolio-backend
    restart: always
    env_file: .env
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - BUILD_DATABASE_URL=${BUILD_DATABASE_URL}
        - REFLEX_API_URL=${REFLEX_API_URL}
    image: kjh-nanophotonics-portfolio-frontend
    env_file:
      - .env
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/conf/d/default.conf:ro
      - /srv/portfolio/data/certbot/conf:/etc/letsencrypt
      - /srv/portfolio/data/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network

  db:
    image: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - /srv/portfolio/data/certbot/conf:/etc/letsencrypt
      - /srv/portfolio/data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  pgdata: { }

networks:
  app-network:
    driver: bridge