services:
  app:
    build:
      context: .
      args:
        - DATABASE_URL=${DATABASE_URL}
        - REFLEX_API_URL=${REFLEX_API_URL}
    image: kjh-nanophotonics-portfolio-app
    env_file:
      - .env

    restart: always
    command: bash -c "unzip backend.zip && uvicorn kjh_nanophotonics_portfolio.kjh_nanophotonics_portfolio:app --host 0.0.0.0 --port 8000"
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy # db 서비스가 healthy 상태가 될 때까지 app 시작을 대기
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      replicas: 2
      update_config:
        parallelism: 1          # 한 번에 하나의 컨테이너만 업데이트
        delay: 10s              # 업데이트 사이 10초 지연
        order: start-first      # 새 컨테이너를 먼저 띄운 후 기존 컨테이너 중지

  db:
    image: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:1.21-alpine
    restart: always
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./frontend:/usr/share/nginx/html
      - /srv/portfolio/data/certbot/conf:/etc/letsencrypt
      - /srv/portfolio/data/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - /srv/portfolio/data/certbot/conf:/etc/letsencrypt
      - /srv/portfolio/data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  pgdata: { }

networks:
  app-network:
    driver: bridge